<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">

	<!-- Map : filmId(in), storeId(in), filmCount(out) -->
	<select id="selectFilmInStock" parameterType="java.util.Map" resultType="int" statementType="CALLABLE">
		{
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer}
			)
		}
	</select>
	
	<insert id="insertFilm" parameterType="com.gd.sakila.vo.Film">
		<selectKey keyProperty="filmId" resultType="int" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO film(title,
						description,
						release_year,
						language_id,
						original_language_id,
						rental_duration,
						rental_rate,
						length,
						replacement_cost, 
						rating,
						special_features)
					VALUES(#{title}, 
						#{description}, 
						#{releaseYear},
						#{languageId}, 
						#{originalLanguageId}, 
						#{rentalDuration}, 
						#{rentalRate}, 
						#{length},
						#{replacementCost}, 
						#{rating}, 
						#{specialFeatures}
						)
	</insert>
	
	<insert id="insertFilmCategory" parameterType="java.util.Map">
		INSERT INTO film_category(film_id, category_id) VALUES(#{filmId},#{categoryId})
	</insert>
	 
	
	<select id="selectRatingList" resultType="String">
		SELECT
			DISTINCT rating
		FROM film
	</select>
	
	<select id="selectFilmList" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
			FID FID,
			title title,
			category category,
			price price,
			rating rating,
			actors actors
		FROM film_list
		<where>
			<if test="categoryName != null">
				AND category = #{categoryName}
			</if>
			<if test="price != null">
				AND price = #{price}
			</if>
			<if test="rating != null">
				AND rating = #{rating}
			</if>
			<if test="title != null"> 
				AND title LIKE CONCAT('%',#{title},'%')
			</if>
			<if test="actor != null"> 
				AND actors LIKE CONCAT('%',#{actor},'%')
			</if>
		</where>
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<select id="selectFilmTotal" resultType="int" parameterType="java.util.Map">
		SELECT count(*) FROM film_list
		<where>
			<if test="categoryName != null">
				AND category = #{categoryName}
			</if>
			<if test="price != null">
				AND price = #{price}
			</if>
			<if test="rating != null">
				AND rating = #{rating}
			</if>
			<if test="title != null"> 
				AND title LIKE CONCAT('%',#{title},'%')
			</if>
			<if test="actor != null"> 
				AND actors LIKE CONCAT('%',#{actor},'%')
			</if>
		</where>
	</select>
	
	<select id="selectActorListByFilm" parameterType="int" resultType="java.util.Map">
		SELECT
			a.actor_id actorId,
			CONCAT(first_name, ' ' , last_name) name,
			film_id filmId
		FROM actor a LEFT JOIN (SELECT
									*
								FROM film_actor
								WHERE film_id=#{filmId}) t
		ON a.actor_id = t.actor_id
		ORDER BY first_name ASC
	</select>
	
	<delete id="deleteActorListByFilm" parameterType="int">
		delete from film_actor where film_id =  #{filmId}
	</delete>
	
	<insert id="insertActorListByFilm" parameterType="int">
		insert into film_actor(actor_id, film_id) values(#{actorId}, #{filmId})
	</insert>
	<select id="selectFilmOne" parameterType="int" resultType="com.gd.sakila.vo.Film">
		SELECT 
			f.film_id filmId, 
			f.title title, 
			f.description description, 
			f.release_year releaseYear, 
			f.language_id languageId, 
			f.original_language_id originalLanguageId, 
			f.rental_duration rentalDuration, 
			f.rental_rate rentalRate, 
			f.length length, 
			f.replacement_cost replacementCost, 
			f.rating rating, 
			f.special_features specialFeatures, 
			f.last_update lastUpdate,
			GROUP_CONCAT(CONCAT(actor.first_name, _utf8mb4' ', actor.last_name) SEPARATOR ', ') actors
		FROM film f 
			LEFT JOIN film_actor ON f.film_id = film_actor.film_id
			LEFT JOIN actor ON film_actor.actor_id = actor.actor_id
		WHERE f.film_id = #{val}
	</select>
</mapper>
